/*
Name: Jacob Zhang
Student ID: 300231094
Date: 4/12/2023
Purpose: Some Predicates for implementing a simple RANSAC Algorithm
*/
%Returns true if the values '[P1, P2, P3]' are in the list 'Points'.
%Parameters: Points(List of points), Point3/[P1, P2, P3](Triplet of points)
random3points(Points, [P1, P2, P3]) :-
    length(Points, NumPoints),
    NumPoints >= 3,
    select(P1, Points, Points1),
    select(P2, Points1, Points2),
    select(P3, Points2, _).

%Returns true if the plane consisting of [A,B,C,D] is generated by the input 3 points
%Parameters: Point3/[[X1,Y1,Z1], [X2,Y2,Z2], [X3,Y3,Z3]](Triplet of points), Plane/[A,B,C,D](3D Plane)
plane([[X1,Y1,Z1], [X2,Y2,Z2], [X3,Y3,Z3]], [A,B,C,D]) :-
    A is Y1 * (Z2 - Z3) + Y2 * (Z3 - Z1) + Y3 * (Z1 - Z2),
    B is Z1 * (X2 - X3) + Z2 * (X3 - X1) + Z3 * (X1 - X2),
    C is X1 * (Y2 - Y3) + X2 * (Y3 - Y1) + X3 * (Y1 - Y2),
    D is -X1 * (Y2 * Z3 - Y3 * Z2) - X2 * (Y3 * Z1 - Y1 * Z3) - X3 * (Y1 * Z2 - Y2 * Z1).

%Returns true if the distance from point [X,Y,Z] to the plane [A,B,C,D] is Distance
%Parameters: [X,Y,Z](Point),[A,B,C,D](Plane),Distance(Distance from Point to Plane)
distance([X,Y,Z], [A,B,C,D], Distance) :-
    Distance is abs(A*X + B*Y + C*Z - D) / sqrt(A*A + B*B + C*C).

%Returns true if there are N supporting points to the Plane in Points
%Parameters: Plane/[A,B,C,D](3D Plane), Points(List of Points), Eps(Max distance to be a supporting point), N(Number of supports)
support([A,B,C,D], Points, Eps, N) :-
    findall(Point, (member(Point, Points), distance(Point, [A,B,C,D], Distance), Distance =< Eps), SupportedPoints),
    length(SupportedPoints, N).

%Returns true if the program must iterate N times for the confidence and percent values
%Parameters: C(Confidence), P(Percentage), N(Number of iterations)
ransac-number-of-iterations(C, P, N) :-
    N is ceiling(log(1 - C) / log(1 - P^3)).

test(random3points, 1) :- random3points([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], [[1,2,3],[4,5,6],[10,11,12]]). %true
test(random3points, 2) :- random3points([[1,2,3],[4,5,6],[7,8,9]], [[1,2,3],[4,5,6],[7,8,9]]). %true
test(random3points, 3) :- random3points([[1,2,3],[4,5,6]], [[1,2,3],[4,5,6]]). %false

test(plane, 1) :- plane([[1,1,1], [2,2,2], [3,3,3]], [0,0,0,0]). %true
test(plane, 2) :- plane([[1,1,1], [2,2,2], [3,1,1]], [-1,-2,-1,0]). %false
test(plane, 3) :- plane([[1,1,1], [0,0,0], [1,0,0]], [0,-1,1,0]). %true

test(support, 1) :- support([1,0,0,0], [[0,1,0],[0,0,1],[2,2,2],[3,3,3]], 0.1, 2). %true
test(support, 2) :- support([0,1,0,0], [[1,0,0],[0,0,1],[100,0,0],[3,3,3]], 0.1, 3). %true
test(support, 3) :- support([1,1,1,0], [[0,0,0],[1,1,1],[2,2,2],[3,3,3]], 0.5, 3). %false

test(ransac_number_of_iterations, 1) :- ransac-number-of-iterations(0.99, 0.5, 69). %false
test(ransac_number_of_iterations, 2) :- ransac-number-of-iterations(0.9, 0.75, 5). %true
test(ransac_number_of_iterations, 3) :- ransac-number-of-iterations(0.95, 0.25, 191). %true